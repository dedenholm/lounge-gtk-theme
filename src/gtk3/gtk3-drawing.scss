// Drawing mixins

// generic drawing of more complex things

@mixin _shadows($list...) {
//
// Helper mixin to stack up to box-shadows;
//
  $shadows: null;

  @each $shadow in $list {
    @if $shadow!=none { $shadows: $shadows, $shadow; }
  }

  box-shadow: $shadows;
}

// entries
@function entry_focus_border($fc:$selected_bg_color) {
  @if $variant == 'light' { @return $fc; }
  @else { @return if($fc==$selected_bg_color, $selected_borders_color, darken($fc, 35%)); }
}

@function entry_focus_shadow($fc:$selected_bg_color) {
  @if $variant == 'light' { @return inset 0 0 0 1px transparentize($fc, 0.9); }
  @else { @return inset 0 0 0 1px $fc; }
}


@mixin entry($t, $fc:$selected_bg_color) {
//
// Entries drawing function
//
// $t: entry type
// $fc: focus color
//
// possible $t values:
// normal, focus, insensitive, backdrop, backdrop-insensitive, osd, osd-focus, osd-backdrop;
//

  @if $t==normal {
    color: $text_color;
    border-color: $borders_color;
    background-color: $base_color;

    @if $style == prime {
      @include _shadows(inset 1px 1px transparentize($borders_color, .7));
    }
    @if $style == flat {
      @include _shadows(entry_focus_shadow(transparentize($fc, 1)));
    }
    // for the transition to work the number of shadows in different states needs to match, hence the transparent shadow here.
  }
  @if $t==focus {
    border-color: entry_focus_border($fc);
    @include _shadows(entry_focus_shadow($fc));

    @if $style == flat and $variant == light {
      @include _shadows(entry_focus_shadow(transparentize($fc, 1)));
    }
  }
  @if $t==insensitive {
    color: $insensitive_fg_color;
    border-color: $borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: none;
  }
  @if $t==osd {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.7);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
  @if $t==osd-focus {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.7);
    background-clip: padding-box;
    box-shadow: if($variant == light, inset 0 0 0 1px $fc, entry_focus_shadow($fc));
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
  @if $t==osd-insensitive {
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: $osd_insensitive_bg_color;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

// buttons

@function _border_color($c, $darker: false) {
  @if $darker == true { @return desaturate(darken($c, 25%), 10%); }
  @else if lightness($c)>70% { @return desaturate(darken($c, 20%), 10%); }
  @else { @return if($variant == 'light', desaturate(darken($c, 10%), 10%), desaturate(darken($c, 20%), 10%)); }
}

@function _text_shadow_color ($tc: $fg_color, $bg: $bg_color) {
//
// calculate the color of text shadows
//
// $tc is the text color
// $bg is the background color
//
  $_lbg: lightness($bg)/100%;
  @if lightness($tc)<50% { @return transparentize(white, 1-$_lbg/($_lbg*1.3)); }
  @else { @return transparentize(black, $_lbg*0.8); }
}

@function _button_hilight_color($c) {
//
// calculate the right top hilight color for buttons
//
// $c: base color;
//
  @if lightness($c)>95% { @return transparentize(white, 0.4); }
  @else if lightness($c)>90% { @return transparentize(white, 0.7); }
  @else if lightness($c)>80% { @return transparentize(white, 0.8); }
  @else if lightness($c)>50% { @return transparentize(white, 0.9); }
  @else if lightness($c)>40% { @return transparentize(white, 0.94); }
  @else { @return transparentize(white, 0.97); }
}

// lounge: calculate outline color for buttons
@function _outline_formula($c) {
  @if lightness($c)>70% { @return if($button_outlines == strong, transparentize(black, 0.75), gtkalpha($selected_bg_color, .7)); }
  @else if lightness($c)>55% { @return transparentize(white, 0.5); }
  @else if lightness($c)>45% { @return transparentize(white, 0.6); }
  @else if lightness($c)>38% { @return transparentize(white, 0.72); }
  @else if lightness($c)>25% { @return transparentize(white, 0.82); }
  @else { @return transparentize(white, 0.85); }
}

@mixin _button_text_shadow ($tc:$fg_color, $bg:$bg_color) {
//
// helper function for the text emboss effect
//
// $tc is the optional text color, not the shadow color
//
// TODO: this functions needs a way to deal with special cases
//

  $_shadow: _text_shadow_color($tc, $bg);

  @if lightness($tc)<50% {
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
  @else {
    text-shadow: 0px 1px $_shadow;
    -gtk-icon-shadow: 0px 1px $_shadow;
  }
}

@mixin button($t, $c:$bg_color, $tc:$fg_color) {
//
// Button drawing function
//
// $t:    button type,
// $c:    base button color for colored* types
// $tc:   optional text color for colored* types
//
// possible $t values:
// normal, hover, active, insensitive, insensitive-active,
// backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
// osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
//
// This mixin sets the $button_fill global variable which containts the button background-image
//
  $_hilight_color: _button_hilight_color($c);
  $_button_border_color: if($c != $bg_color, _border_color($c), $borders_color);
  $_button_alt_border_color: if($c != $bg_color, _border_color($c, true), $alt_borders_color);
  $_outline_color: _outline_formula($c);

  @if $t==normal {
  //
  // normal button
  //
    color: $tc;
    outline-color: $_outline_color;
    border-color: $_button_border_color;
    $button_fill: if($variant == 'light', image(lighten($c, 2%)),
                                          image(lighten($c, 2%)));
    background-image: $button_fill;

    outline-offset: if(lightness($c)>70%, -1px, -2px);

    @include _button_text_shadow($tc, $c);

    @if $style == prime {
      @include _shadows(1px 1px transparentize($_button_border_color, .8),
                        inset 0 0 0 1px $_hilight_color,
                        inset 0 -1px transparentize($_button_border_color, .8));

      // lounge: outset shadow at the right side of buttons causes issues in the next button
      .nautilus-path-bar &,
      filechooser .path-bar.linked &:not(:last-child) {
        @include _shadows(0 1px transparentize($_button_border_color, .8),
                          inset 0 0 0 1px $_hilight_color,
                          inset 0 -1px transparentize($_button_border_color, .8));
      }

      // lounge: we dont need dark bottom shadow in vertical linked buttons
      .linked.vertical &:not(:last-child) {
        @include _shadows(1px 1px transparentize($_button_border_color, .8),
                          inset 0 0 0 1px $_hilight_color);
      }
    }
  }

  @else if $t==hover {
  //
  // hovered button
  //
    color: $tc;
    outline-color: $_outline_color;
    border-color: $_button_border_color;
    $button_fill: if($variant == 'light', image(lighten($c, 5%)),
                                          image(lighten($c, 5%))) !global;
    @include _button_text_shadow($tc,lighten($c, 6%));
    background-image: $button_fill;

    @if $style == prime {
      @include _shadows(1px 1px transparentize($_button_border_color, .8),
                        inset 0 0 0 1px $_hilight_color,
                        inset 0 -1px transparentize($_button_border_color, .8));
    }
  }

  @else if $t==active {
  //
  // pushed button
  //
    color: $tc;
    outline-color: $_outline_color;
    border-color: $_button_border_color;
    $button_fill: if($variant == 'light', if($c == $bg_color, image(darken($c, 6%)), image(desaturate(darken($c, 6%), 10%))),
                                          image(darken($c, 5%))) !global;
    background-image: $button_fill;

    text-shadow: none;
    -gtk-icon-shadow: none;

    @if $style == prime {
      @include _shadows(inset 1px 1px transparentize($_button_border_color, 0.8));

      .nautilus-path-bar &,
      filechooser .path-bar.linked &:not(:last-child) {
        @include _shadows(inset 1px 1px transparentize($_button_border_color, 0.8));
      }
    }
  }

  @else if $t==insensitive {
  //
  // insensitive button
  //
    $_bg: if($c != $bg_color, mix($c, $base_color, 85%), $insensitive_bg_color);

    label, & { color: if($tc != $fg_color, mix($tc, $_bg, 30%), $insensitive_fg_color); }

    border-color: if($c != $bg_color, _border_color($c), $insensitive_borders_color);
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    text-shadow: none;
    -gtk-icon-shadow: none;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentize(white, 1));
  }

  @else if $t==insensitive-active {
  //
  // insensitive pushed button
  //
    $_bg: if($variant == 'light', darken(mix($c, $base_color, 85%), 8%), darken(mix($c, $base_color, 85%), 5%));
    $_bc: if($c != $bg_color, _border_color($c), $insensitive_borders_color);

    label, & { color: if($c != $bg_color, mix($tc, $_bg, 60%), $insensitive_fg_color); }

    border-color: $_bc;
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentize(white, 1));
  }

  @if $t==normal-alt {
  //
  // normal button alternative look
  //
    color: $tc;
    outline-color: $_outline_color;
    border-color: $_button_alt_border_color;
    background-image: if($variant == light, image(lighten($c, 5%)),
                                            image(lighten($c, 2%)));

    @if $style == prime {
      @include _shadows(0 1px transparentize(black, .9),
                        inset 0 1px _button_hilight_color(lighten($c, 6%)),
                        inset 0px -2px transparentize($_button_alt_border_color, .95),
                        inset 0px -1px transparentize($_button_alt_border_color, .8));
    }

    @include _button_text_shadow($tc, $c);
  }

  @else if $t==hover-alt {
  //
  // hovered button alternative look
  //
    color: $tc;
    outline-color: $_outline_color;
    border-color: $_button_alt_border_color;
    $button_fill: if($variant == light, image(lighten($c, 7%)),
                                        image(lighten($c, 7%))) !global;
    background-image: $button_fill;

    @if $style == prime {
      @include _shadows(0 1px transparentize(black, .9),
                        inset 0 1px _button_hilight_color(lighten($c, 6%)),
                        inset 0px -2px transparentize($_button_alt_border_color, .95),
                        inset 0px -1px transparentize($_button_alt_border_color, .8));
    }
  }

  @else if $t==osd {
  //
  // normal osd button
  //
    $_bg: if($c != $bg_color, transparentize($c, 0.5), if($variant == 'light', $osd_bg_color, lighten($osd_bg_color, 3%)));

    color: $osd_fg_color;
    border-color: $osd_borders_color;
    background-color: transparent;
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    background-clip: padding-box;

    @if $style == prime {
      @include _shadows(inset 0 -1px transparentize($osd_borders_color, .75),
                        inset 0 1px if($variant == 'light', transparentize(white, 0.9), transparentize(white, 0.95)));
    }

    text-shadow: none;
    -gtk-icon-shadow: none;
    outline-color: transparentize($osd_fg_color, 0.75);
  }

  @else if $t==osd-hover {
  //
  // hover osd button
  //
    $_bg: if($c != $bg_color, transparentize($c, 0.3), if($variant == 'light', lighten($osd_bg_color, 5%), lighten($osd_bg_color, 7%)));

    color: $osd_fg_color;
    border-color: $osd_borders_color;
    background-color: transparent;
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    background-clip: padding-box;

    @if $style == prime {
      box-shadow: inset 0 1px transparentize(white, 0.9);
    }

    text-shadow: none;
    -gtk-icon-shadow: none;
    outline-color: transparentize($osd_fg_color, 0.75);
  }

  @else if $t==osd-active {
  //
  // active osd button
  //
    $_bg: if($c != $bg_color, $c, if($variant == 'light', darken($osd_bg_color, 10%), darken($osd_bg_color, 2%)));

    color: $osd_fg_color;
    border-color: $osd_borders_color;
    background-color: transparent;
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
    outline-color: transparentize($osd_fg_color, 0.75);
  }

  @else if $t==osd-insensitive {
  //
  // insensitive osd button
  //
    color: $osd_insensitive_fg_color;
    border-color: $insensitive_osd_borders_color;
    background-color: transparent;
    $button_fill: image($osd_insensitive_bg_color) !global;
    background-image: $button_fill;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==undecorated {
  //
  // reset
  //
    border-color: transparent;
    background-color: transparent;
    $button_fill: none !global;
    background-image: $button_fill;

    @include _shadows(inset 0 1px transparentize(white, 1));

    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

@mixin headerbar_fill($c:$headerbar_color, $hc:$top_hilight, $ov: none) {
//
// headerbar fill
//
// $c:  base color
// $hc: top highlight color
// $ov: a background layer for background shorthand (hence no commas!)
//
  $fill: image($c);

  @if $ov != none { background: $c $ov, $fill; }
  @else { background: $c $fill; }

  @if $style == prime {
    box-shadow: inset 0 1px $hc; // top highlight
  }
}

@mixin overshoot($p, $t:normal, $c:$fg_color) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_big_gradient_length: 30%;

  $_position: center top;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==bottom {
    $_position: center bottom;
    $_linear_gradient_direction: to top;
  }

  @else if $p==right {
    $_position: right center;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  @else if $p==left {
    $_position: left center;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_big_gradient_color: $c;

  @if $c==$fg_color { $_big_gradient_color: $fg_color; }

  $_big_gradient: image(if($variant == 'light', transparentize($c, 0.97), transparentize($c, 0.95)));

  @if $t==normal {
    background-image: $_big_gradient;
    background-size: $_big_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}
